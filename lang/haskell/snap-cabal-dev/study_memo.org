* snapの勉強メモ
** snap api tutorial
*** EXAMINING HELLO WORLD
http://snapframework.com/docs/tutorials/snap-api

**** snapは以下の4つのコンポーネントからできている
- snap-core
  webサーバのインタフェースと型定義とサーバにとらわれないすべてのコードを定義している

- snap-server
  snap-coreで定義されたインタフェースをサポートするhttpサーバライブラリ

- heist
  HTMLテンプレートライブラリ。

- snap
  上記3つのパッケージの上に構築されるライブラリ。複雑なウェブサイトを構築するための高レベルな抽象を提供する。
  また、さまざまなスケルトンプロジェクトを生成できるsnap実行ファイルを提供する。

*** HELLO, SNAP!

** snap-core
http://hackage.haskell.org/packages/archive/snap-core/0.9.3.1/doc/html/Snap-Core.html

** snaplet tutorial
http://snapframework.com/docs/tutorials/snaplets-tutorial

まず最初に状態を保持するデータ型を定義する。
このデータ型はアプリケーションでしようされているsnaplets(それはSnapletでラップされている)を含んでいる。

> data App = App
>     { _heist       :: Snaplet (Heist App)
>     , _foo         :: Snaplet Foo
>     , _bar         :: Snaplet Bar
>     , _companyName :: IORef B.ByteString
>     }
>
> makeLenses ''App

次に、initializerを定義する必要がある。

> appInit :: SnapletInit App App
> appInit = makeSnaplet "myapp" "My example application" Nothing $ do
>     hs <- nestSnaplet "heist" heist $ heistInit "templates"
>     fs <- nestSnaplet "foo" foo $ fooInit
>     bs <- nestSnaplet "" bar $ nameSnaplet "newname" $ barInit foo
>     addRoutes [ ("/hello", writeText "hello world")
>               , ("/fooname", with foo namePage)
>               , ("/barname", with bar namePage)
>               , ("/company", companyHandler)
>               ]
>     wrapSite (<|> heistServe)
>     ref <- liftIO $ newIORef "fooCorp"
>     return $ App hs fs bs ref

ここでの基本的アイデアはアプリケーションを初期化するために、
まずsnapletsの一つ一つを初期化して
いくつかのrouteを追加して
すべてのrouteにラップしている関数を実行して
結果状態データを返却する

